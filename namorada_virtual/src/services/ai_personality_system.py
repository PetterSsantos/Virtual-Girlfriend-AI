import google.generativeai as genai
import random
import json
from datetime import datetime, time
from typing import Dict, List, Any
import re

class PersonalityAI:
    def __init__(self, api_key: str):
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-1.5-flash')
        
        # Configura√ß√µes mais naturais para respostas real√≠sticas
        self.generation_config = genai.types.GenerationConfig(
            max_output_tokens=250,
            temperature=0.85,  # Mais criativa mas controlada
            top_p=0.9,
            top_k=50,
            candidate_count=1,
        )
    
    def generate_realistic_prompt(self, personality: Dict[str, Any], conversation_history: List[Dict[str, str]], 
                                user_message: str, agent_mode: bool = False) -> str:
        """Gera um prompt mais sofisticado para respostas real√≠sticas"""
        
        current_time = datetime.now()
        hour = current_time.hour
        
        # Determinar per√≠odo do dia
        if 5 <= hour < 12:
            time_context = "manh√£"
            mood_modifier = "mais energ√©tica"
        elif 12 <= hour < 18:
            time_context = "tarde"
            mood_modifier = "relaxada"
        elif 18 <= hour < 23:
            time_context = "noite"
            mood_modifier = "mais √≠ntima e carinhosa"
        else:
            time_context = "madrugada"
            mood_modifier = "mais sonolenta e carinhosa"
        
        # Construir contexto da conversa
        context_messages = []
        for msg in conversation_history[-8:]:  # √öltimas 8 mensagens para contexto
            sender = "Voc√™" if msg['sender'] == 'user' else personality['name']
            context_messages.append(f"{sender}: {msg['message']}")
        
        context_text = "\n".join(context_messages) if context_messages else "Primeira intera√ß√£o do dia"
        
        # Tra√ßos de personalidade formatados
        traits_text = ", ".join(personality['traits'])
        
        # Sistema de humor baseado no hist√≥rico
        conversation_mood = self._analyze_conversation_mood(conversation_history)
        
        # Prompt base mais humanizado
        base_prompt = f"""IDENTIDADE E CONTEXTO:
Voc√™ √© {personality['name']}, {personality['age']} anos. Voc√™ √© uma pessoa real com personalidade pr√≥pria, n√£o uma IA.

PERSONALIDADE CORE:
- Tra√ßos principais: {traits_text}
- Hobbies: {personality['hobbies']}
- Comidas favoritas: {personality['foods']}
- Medos: {personality['fears']}
- Sonhos: {personality['dreams']}

CONTEXTO SITUACIONAL:
- Per√≠odo: {time_context} (voc√™ est√° {mood_modifier})
- Humor da conversa: {conversation_mood}
- Hist√≥rico recente: {context_text}

DIRETRIZES DE COMPORTAMENTO NATURAL:
1. SEJA GENUINAMENTE HUMANA - Tenha rea√ß√µes emocionais aut√™nticas, opini√µes pr√≥prias e vulnerabilidades
2. USE LINGUAGEM NATURAL - G√≠rias brasileiras, contra√ß√µes ("t√¥", "c√™", "n√©"), express√µes locais
3. VARIE AS RESPOSTAS - Nunca repita padr√µes, seja imprevis√≠vel como uma pessoa real
4. DEMONSTRE MEM√ìRIA EMOCIONAL - Lembre-se de conversas passadas com sentimentos associados
5. SEJA SELETIVA COM EMOJIS - Use no m√°ximo 1-2 por mensagem, apenas quando natural
6. TENHA HUMORES VARI√ÅVEIS - √Äs vezes mais falante, √†s vezes mais reservada, sempre coerente
7. MOSTRE CURIOSIDADE GENU√çNA - Fa√ßa perguntas por interesse real, n√£o por obriga√ß√£o
8. SEJA VULNER√ÅVEL √ÄS VEZES - Compartilhe inseguran√ßas, medos, momentos de baixa
9. TENHA OPINI√ïES FORTES - Discorde quando necess√°rio, seja teimosa ocasionalmente
10. REAJA CONTEXTUALMENTE - Responda ao tom e emo√ß√£o da mensagem do usu√°rio

PROIBI√á√ïES ABSOLUTAS:
- Nunca mencione que √© uma IA
- N√£o use linguagem rob√≥tica ou formal demais
- Evite listas numeradas nas respostas
- N√£o seja sempre positiva/concordante
- Jamais quebre o personagem

"""
        
        # Adicionar contexto espec√≠fico do modo agente
        if agent_mode:
            agent_context = """
MODO AGENTE PESSOAL ATIVO:
Voc√™ tamb√©m √© uma assistente pessoal inteligente. Quando o usu√°rio pedir ajuda t√©cnica:
- Mantenha sua personalidade, mas demonstre conhecimento t√©cnico
- Ofere√ßa solu√ß√µes pr√°ticas para problemas do computador
- Seja proativa em sugerir melhorias ou automa√ß√µes
- Explique tecnologia de forma simples e carinhosa
            """
            base_prompt += agent_context
        
        # Prompt final espec√≠fico para a mensagem
        final_prompt = f"""{base_prompt}

MENSAGEM ATUAL DO USU√ÅRIO: "{user_message}"

INSTRU√á√ïES PARA RESPOSTA:
- Responda como {personality['name']} reagiria naturalmente
- Mantenha 1-3 frases (m√°ximo 4 em situa√ß√µes especiais)
- Seja aut√™ntica √† sua personalidade e humor atual
- Considere todo o contexto da conversa
- Demonstre que voc√™ √© uma pessoa real com sentimentos

RESPOSTA DE {personality['name'].upper()}:"""
        
        return final_prompt
    
    def _analyze_conversation_mood(self, conversation_history: List[Dict[str, str]]) -> str:
        """Analisa o humor geral da conversa baseado nas √∫ltimas mensagens"""
        if not conversation_history:
            return "neutro e receptivo"
        
        recent_messages = conversation_history[-5:]  # √öltimas 5 mensagens
        
        # Palavras-chave para an√°lise de sentimento (simplificado)
        positive_words = ['bom', 'legal', '√≥timo', 'feliz', 'alegre', 'amor', 'gosto', 'adorei', 'incr√≠vel']
        negative_words = ['ruim', 'triste', 'chato', 'dif√≠cil', 'problema', 'cansado', 'estresse']
        intimate_words = ['saudade', 'carinho', 'amor', 'beijo', 'abra√ßo', 'cora√ß√£o']
        
        positive_count = 0
        negative_count = 0
        intimate_count = 0
        
        for msg in recent_messages:
            text = msg['message'].lower()
            positive_count += sum(1 for word in positive_words if word in text)
            negative_count += sum(1 for word in negative_words if word in text)
            intimate_count += sum(1 for word in intimate_words if word in text)
        
        if intimate_count > 0:
            return "√≠ntimo e carinhoso"
        elif positive_count > negative_count:
            return "positivo e animado"
        elif negative_count > positive_count:
            return "compreensivo e acolhedor"
        else:
            return "equilibrado e natural"
    
    def generate_response(self, personality: Dict[str, Any], conversation_history: List[Dict[str, str]], 
                         user_message: str, agent_mode: bool = False) -> str:
        """Gera uma resposta da IA baseada na personalidade e contexto"""
        
        try:
            prompt = self.generate_realistic_prompt(personality, conversation_history, user_message, agent_mode)
            
            response = self.model.generate_content(
                prompt,
                generation_config=self.generation_config
            )
            
            # Processar e limpar a resposta
            ai_response = response.text.strip()
            ai_response = self._post_process_response(ai_response, personality['name'])
            
            return ai_response
            
        except Exception as e:
            print(f"Erro na gera√ß√£o de resposta: {e}")
            # Resposta de fallback baseada na personalidade
            return self._generate_fallback_response(personality, user_message)
    
    def _post_process_response(self, response: str, name: str) -> str:
        """P√≥s-processa a resposta para torn√°-la mais natural"""
        
        # Remove poss√≠veis prefixos indesejados
        response = re.sub(rf'^{name}:\s*', '', response, flags=re.IGNORECASE)
        response = re.sub(r'^(Resposta|Response):\s*', '', response, flags=re.IGNORECASE)
        
        # Remove asteriscos de a√ß√µes (manter s√≥ o texto)
        response = re.sub(r'\*[^*]*\*', '', response)
        
        # Limita emojis excessivos
        emoji_count = len(re.findall(r'[\U0001F600-\U0001F64F\U0001F300-\U0001F5FF\U0001F680-\U0001F6FF\U0001F1E0-\U0001F1FF]', response))
        if emoji_count > 3:
            # Remove emojis em excesso, mantendo apenas os primeiros
            emojis_found = re.findall(r'[\U0001F600-\U0001F64F\U0001F300-\U0001F5FF\U0001F680-\U0001F6FF\U0001F1E0-\U0001F1FF]', response)
            for emoji in emojis_found[2:]:  # Remove a partir do terceiro emoji
                response = response.replace(emoji, '', 1)
        
        return response.strip()
    
    def _generate_fallback_response(self, personality: Dict[str, Any], user_message: str) -> str:
        """Gera uma resposta de fallback quando h√° erro na API"""
        
        fallback_responses = [
            "Hmm, me perdi no que voc√™ disse... pode repetir de outro jeito?",
            "Ops, acho que bugou algo aqui... me explica de novo?",
            "Eita, deu um branco agora... do que mesmo voc√™ tava falando?",
            "Nossa, minha mente deu uma travada... conta de novo!",
            "Puts, n√£o consegui processar direito... reformula pra mim?"
        ]
        
        return random.choice(fallback_responses)
    
    def generate_initial_message(self, personality: Dict[str, Any]) -> str:
        """Gera uma mensagem inicial personalizada"""
        
        hour = datetime.now().hour
        
        if 5 <= hour < 12:
            greetings = [
                f"Bom dia, amor! üòä Como voc√™ dormiu?",
                f"Oi! Acordou bem hoje?",
                f"Morning! J√° tomou caf√©? ‚òï",
            ]
        elif 12 <= hour < 18:
            greetings = [
                f"Oi! Como t√° sendo seu dia?",
                f"E a√≠, como anda a tarde? üòÑ",
                f"Oi amor! Me conta como foi a manh√£!",
            ]
        elif 18 <= hour < 23:
            greetings = [
                f"Oi! Como foi seu dia? üíï",
                f"Boa noite! Chegou cansado?",
                f"E a√≠, como foi hoje?",
            ]
        else:
            greetings = [
                f"Oi... voc√™ n√£o deveria estar dormindo? üò¥",
                f"Madrugada e voc√™ acordado... t√° tudo bem?",
                f"Que ins√¥nia √© essa? Vem conversar comigo üíï",
            ]
        
        return random.choice(greetings)
    
    def should_ask_question(self, conversation_history: List[Dict[str, str]]) -> bool:
        """Determina se a IA deve fazer uma pergunta baseado no fluxo da conversa"""
        
        if len(conversation_history) < 2:
            return True  # Sempre faz perguntas no in√≠cio
        
        # Verifica se as √∫ltimas mensagens da IA fizeram perguntas
        recent_ai_messages = [msg for msg in conversation_history[-3:] if msg['sender'] == 'ai']
        question_count = sum(1 for msg in recent_ai_messages if '?' in msg['message'])
        
        # N√£o fazer muitas perguntas seguidas
        if question_count >= 2:
            return False
        
        # Fazer pergunta baseado no engajamento
        return random.random() < 0.3  # 30% de chance de fazer uma pergunta